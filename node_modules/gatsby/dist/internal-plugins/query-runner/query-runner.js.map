{"version":3,"sources":["../../../src/internal-plugins/query-runner/query-runner.js"],"names":["fs","require","report","joinPath","store","module","exports","pageOrLayout","component","getState","schema","program","graphql","query","context","result","errors","log","stripIndent","componentPath","_name","process","exit","contextKey","path","resultJSON","JSON","stringify","writeFile","directory","jsonName"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA,IAAMA,KAAKC,QAAS,UAAT,CAAX;AACA,IAAMC,SAASD,QAAS,yBAAT,CAAf;;eAEqBA,QAAS,kBAAT,C;IAAbE,Q,YAAAA,Q;;gBACUF,QAAS,aAAT,C;IAAVG,K,aAAAA,K;;AAER;;;AACAC,OAAOC,OAAP;AAAA,sFAAiB,iBAAOC,YAAP,EAAqBC,SAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,8BACaJ,MAAMK,QAAN,EADb,EACPC,MADO,mBACPA,MADO,EACCC,OADD,mBACCA,OADD;;AAGTC,mBAHS,GAGC,SAAVA,OAAU,CAACC,KAAD,EAAQC,OAAR;AAAA,qBACd,sBAAgBJ,MAAhB,EAAwBG,KAAxB,EAA+BC,OAA/B,EAAwCA,OAAxC,EAAiDA,OAAjD,CADc;AAAA,aAHD;;AAMf;;;AACIC,kBAPW;;AASf;;AATe,kBAUX,CAACP,UAAUK,KAAX,IAAoBL,UAAUK,KAAV,KAAqB,EAV9B;AAAA;AAAA;AAAA;;AAWbE,qBAAS,EAAT;AAXa;AAAA;;AAAA;AAAA;AAAA,mBAaEH,QAAQJ,UAAUK,KAAlB,6BACVN,YADU,EAEVA,aAAaO,OAFH,EAbF;;AAAA;AAabC,kBAba;;AAAA;;AAmBf;AACA;AACA,gBAAIA,UAAUA,OAAOC,MAArB,EAA6B;AAC3Bd,qBAAOe,GAAP,CACEf,OAAOgB,WAAY;iCACQV,UAAUW,aAAc;;;YAG7CJ,OAAOC,MAAP,IAAiB,EAAG;;YAEpBR,UAAUK,KAAM;OAPxB;;AAWA;AACA,kBAAIF,QAAQS,KAAR,KAAmB,OAAvB,EAA+B;AAC7BC,wBAAQC,IAAR,CAAa,CAAb;AACD;AACF;;AAED;AACIC,sBAxCW,GAwCG,aAxCH;;AAyCf,gBAAI,CAAChB,aAAaiB,IAAlB,EAAwB;AACtBD,2BAAc,eAAd;AACD;AACDR,mBAAOQ,UAAP,IAAqBhB,aAAaO,OAAlC;AACMW,sBA7CS,GA6CIC,KAAKC,SAAL,CAAeZ,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CA7CJ;AAAA;AAAA,mBA+CTf,GAAG4B,SAAH,CACJzB,SAASQ,QAAQkB,SAAjB,EAA6B,QAA7B,EAAuC,MAAvC,EAA8CtB,aAAauB,QAA3D,CADI,EAEJL,UAFI,CA/CS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA","file":"query-runner.js","sourcesContent":["import { graphql as graphqlFunction } from \"graphql\"\nconst fs = require(`fs-extra`)\nconst report = require(`gatsby-cli/lib/reporter`)\n\nconst { joinPath } = require(`../../utils/path`)\nconst { store } = require(`../../redux`)\n\n// Run query for a page\nmodule.exports = async (pageOrLayout, component) => {\n  const { schema, program } = store.getState()\n\n  const graphql = (query, context) =>\n    graphqlFunction(schema, query, context, context, context)\n\n  // Run query\n  let result\n\n  // Nothing to do if the query doesn't exist.\n  if (!component.query || component.query === ``) {\n    result = {}\n  } else {\n    result = await graphql(component.query, {\n      ...pageOrLayout,\n      ...pageOrLayout.context,\n    })\n  }\n\n  // If there's a graphql error then log the error. If we're building, also\n  // quit.\n  if (result && result.errors) {\n    report.log(\n      report.stripIndent`\n        The GraphQL query from ${component.componentPath} failed\n\n        Errors:\n          ${result.errors || []}\n        Query:\n          ${component.query}\n      `\n    )\n\n    // Perhaps this isn't the best way to see if we're building?\n    if (program._name === `build`) {\n      process.exit(1)\n    }\n  }\n\n  // Add the path/layout context onto the results.\n  let contextKey = `pathContext`\n  if (!pageOrLayout.path) {\n    contextKey = `layoutContext`\n  }\n  result[contextKey] = pageOrLayout.context\n  const resultJSON = JSON.stringify(result, null, 4)\n\n  await fs.writeFile(\n    joinPath(program.directory, `.cache`, `json`, pageOrLayout.jsonName),\n    resultJSON\n  )\n}\n"]}
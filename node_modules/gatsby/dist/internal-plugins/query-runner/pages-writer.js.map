{"version":3,"sources":["../../../src/internal-plugins/query-runner/pages-writer.js"],"names":["_","require","fs","store","emitter","getLayoutById","layouts","find","l","id","writePages","bootstrapFinished","getState","program","pages","pagesData","reduce","mem","path","matchPath","componentChunkName","layout","jsonName","layoutOjb","machineId","layoutComponentChunkName","components","json","pageLayouts","forEach","push","p","component","uniq","uniqBy","c","writeFile","directory","JSON","stringify","syncRequires","map","join","j","componentWrapperPath","asyncRequires","exports","oldPages","debouncedWritePages","debounce","isEqual","on"],"mappings":"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","file":"pages-writer.js","sourcesContent":["const _ = require(`lodash`)\nconst fs = require(`fs-extra`)\n\nconst { store, emitter } = require(`../../redux/`)\nimport { generatePathChunkName } from \"../../utils/js-chunk-names\"\n\nimport { joinPath } from \"../../utils/path\"\n\nconst getLayoutById = layouts => id => layouts.find(l => l.id === id)\n\n// Write out pages information.\nconst writePages = async () => {\n  bootstrapFinished = true\n  let { program, pages, layouts } = store.getState()\n  // Write out pages.json\n  const pagesData = pages.reduce(\n    (mem, { path, matchPath, componentChunkName, layout, jsonName }) => {\n      const layoutOjb = getLayoutById(layouts)(layout)\n      return [\n        ...mem,\n        {\n          componentChunkName,\n          layout: layoutOjb ? layoutOjb.machineId : layout,\n          layoutComponentChunkName: layoutOjb && layoutOjb.componentChunkName,\n          jsonName,\n          path,\n          matchPath,\n        },\n      ]\n    },\n    []\n  )\n\n  // Get list of components, layouts, and json files.\n  let components = []\n  let json = []\n  let pageLayouts = []\n\n  pages.forEach(p => {\n    components.push({\n      componentChunkName: p.componentChunkName,\n      component: p.component,\n    })\n    if (p.layout) {\n      let layout = getLayoutById(layouts)(p.layout)\n      pageLayouts.push(layout)\n      json.push({\n        jsonName: layout.jsonName,\n      })\n    }\n    json.push({ path: p.path, jsonName: p.jsonName })\n  })\n\n  pageLayouts = _.uniq(pageLayouts)\n  components = _.uniqBy(components, c => c.componentChunkName)\n\n  await fs.writeFile(\n    joinPath(program.directory, `.cache/pages.json`),\n    JSON.stringify(pagesData, null, 4)\n  )\n\n  // Create file with sync requires of layouts/components/json files.\n  let syncRequires = `// prefer default export if available\nconst preferDefault = m => m && m.default || m\n\\n\\n`\n  syncRequires += `exports.components = {\\n${components\n    .map(\n      c =>\n        `  \"${c.componentChunkName}\": preferDefault(require(\"${joinPath(\n          c.component\n        )}\"))`\n    )\n    .join(`,\\n`)}\n}\\n\\n`\n  syncRequires += `exports.json = {\\n${json\n    .map(\n      j =>\n        `  \"${j.jsonName}\": require(\"${joinPath(\n          program.directory,\n          `/.cache/json/`,\n          j.jsonName\n        )}\")`\n    )\n    .join(`,\\n`)}\n}\\n\\n`\n  syncRequires += `exports.layouts = {\\n${pageLayouts\n    .map(\n      l =>\n        `  \"${l.machineId}\": preferDefault(require(\"${\n          l.componentWrapperPath\n        }\"))`\n    )\n    .join(`,\\n`)}\n}`\n\n  await fs.writeFile(\n    `${program.directory}/.cache/sync-requires.js`,\n    syncRequires\n  )\n  // Create file with async requires of layouts/components/json files.\n  let asyncRequires = `// prefer default export if available\nconst preferDefault = m => m && m.default || m\n\\n`\n  asyncRequires += `exports.components = {\\n${components\n    .map(\n      c =>\n        `  \"${c.componentChunkName}\": require(\"gatsby-module-loader?name=${\n          c.componentChunkName\n        }!${joinPath(c.component)}\")`\n    )\n    .join(`,\\n`)}\n}\\n\\n`\n  asyncRequires += `exports.json = {\\n${json\n    .map(\n      j =>\n        `  \"${\n          j.jsonName\n        }\": require(\"gatsby-module-loader?name=${generatePathChunkName(\n          j.path\n        )}!${joinPath(program.directory, `/.cache/json/`, j.jsonName)}\")`\n    )\n    .join(`,\\n`)}\n}\\n\\n`\n  asyncRequires += `exports.layouts = {\\n${pageLayouts\n    .map(\n      l =>\n        `  \"${l.machineId}\": require(\"gatsby-module-loader?name=${\n          l.componentChunkName\n        }!${l.componentWrapperPath}\")`\n    )\n    .join(`,\\n`)}\n}`\n\n  await fs.writeFile(\n    joinPath(program.directory, `.cache/async-requires.js`),\n    asyncRequires\n  )\n\n  return\n}\n\nexports.writePages = writePages\n\nlet bootstrapFinished = false\nlet oldPages\nconst debouncedWritePages = _.debounce(() => {\n  // Don't write pages again until bootstrap has finished.\n  if (bootstrapFinished && !_.isEqual(oldPages, store.getState().pages)) {\n    writePages()\n    oldPages = store.getState().pages\n  }\n}, 250)\n\nemitter.on(`CREATE_PAGE`, () => {\n  debouncedWritePages()\n})\nemitter.on(`DELETE_PAGE`, () => {\n  debouncedWritePages()\n})\nemitter.on(`DELETE_PAGE_BY_PATH`, () => {\n  debouncedWritePages()\n})\n"]}
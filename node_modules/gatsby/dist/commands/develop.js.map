{"version":3,"sources":["../../src/commands/develop.js"],"names":["program","directory","directoryPath","withBasePath","createIndexHtml","developHtml","catch","err","name","report","panic","stripIndent","bootstrap","webpackConfig","port","compilerConfig","devConfig","resolve","compiler","webpack","app","express","use","require","log","path","heartbeat","graphqlHTTP","schema","store","getState","graphiql","get","req","res","launchEditor","query","fileName","lineNumber","end","static","__dirname","noInfo","quiet","publicPath","output","proxy","config","prefix","url","proxiedUrl","originalUrl","pipe","request","next","sendFile","decodeURIComponent","parsedPath","parsePath","extname","startsWith","status","server","Server","io","on","socket","join","listener","listen","host","code","watchGlobs","map","chokidar","watch","to","emit","startServer","rl","copyStaticDirectory","formatWebpackMessages","chalk","address","setTimeout","rlInterface","createInterface","input","process","stdin","stdout","exit","module","exports","prepareUrls","printInstructions","appName","urls","useYarn","console","bold","lanUrlForTerminal","localUrlForTerminal","cyan","protocol","formatUrl","format","hostname","pathname","prettyPrintUrl","isUnspecifiedHost","lanUrlForConfig","ip","test","undefined","_e","localUrlForBrowser","detect","parseInt","Promise","_port","question","answer","length","match","then","c","l","isFirstCompile","plugin","messages","stats","toJson","isSuccessful","errors","warnings","sitePackageJson","open"],"mappings":";;;;;;;;;;;sFAyCA,kBAA2BA,OAA3B;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACQC,qBADR,GACoBD,QAAQC,SAD5B;AAEQC,yBAFR,GAEwBC,aAAaF,SAAb,CAFxB;;AAGQG,2BAHR,GAG0B,SAAlBA,eAAkB;AAAA,qBACtBC,YAAYL,OAAZ,EAAqBM,KAArB,CAA2B,eAAO;AAChC,oBAAIC,IAAIC,IAAJ,KAAc,cAAlB,EAAiC;AAC/BC,yBAAOC,KAAP,CAAaH,GAAb;AACA;AACD;AACDE,uBAAOC,KAAP,CACED,OAAOE,WAAY;;;;SADrB,EAMEJ,GANF;AAQD,eAbD,CADsB;AAAA,aAH1B;;AAmBE;;;AAnBF;AAAA,mBAoBQK,UAAUZ,OAAV,CApBR;;AAAA;AAAA;AAAA,mBAsBQI,iBAtBR;;AAAA;AAAA;AAAA,mBAwB+BS,cAC3Bb,OAD2B,EAE3BC,SAF2B,EAG1B,SAH0B,EAI3BD,QAAQc,IAJmB,CAxB/B;;AAAA;AAwBQC,0BAxBR;AA+BQC,qBA/BR,GA+BoBD,eAAeE,OAAf,EA/BpB;AAgCQC,oBAhCR,GAgCmBC,QAAQH,SAAR,CAhCnB;;AAkCE;;;;AAGMI,eArCR,GAqCcC,SArCd;;AAsCED,gBAAIE,GAAJ,CACEC,QAAS,wBAAT,EAAkCL,QAAlC,EAA4C;AAC1CM,mBAAK,eAAM,CAAE,CAD6B;AAE1CC,oBAAO,gBAFmC;AAG1CC,yBAAW,KAAK;AAH0B,aAA5C,CADF;AAOAN,gBAAIE,GAAJ,CACG,aADH,EAEEK,YAAY;AACVC,sBAAQC,MAAMC,QAAN,GAAiBF,MADf;AAEVG,wBAAU;AAFA,aAAZ,CAFF;AAOAX,gBAAIY,GAAJ,CAAS,+BAAT,EAAyC,UAACC,GAAD,EAAMC,GAAN,EAAc;AACrDC,2BAAaF,IAAIG,KAAJ,CAAUC,QAAvB,EAAiCJ,IAAIG,KAAJ,CAAUE,UAA3C;AACAJ,kBAAIK,GAAJ;AACD,aAHD;;AAKAnB,gBAAIE,GAAJ,CAAQD,QAAQmB,MAAR,CAAeC,YAAa,SAA5B,CAAR;;AAEArB,gBAAIE,GAAJ,CACEC,QAAS,wBAAT,EAAkCL,QAAlC,EAA4C;AAC1CwB,sBAAQ,IADkC;AAE1CC,qBAAO,IAFmC;AAG1CC,0BAAY5B,UAAU6B,MAAV,CAAiBD;AAHa,aAA5C,CADF;;AAQA;AACQE,iBApEV,GAoEoBjB,MAAMC,QAAN,GAAiBiB,MApErC,CAoEUD,KApEV;;AAqEE,gBAAIA,KAAJ,EAAW;AACDE,oBADC,GACeF,KADf,CACDE,MADC,EACOC,IADP,GACeH,KADf,CACOG,GADP;;AAET7B,kBAAIE,GAAJ,CAAS,GAAE0B,MAAO,IAAlB,EAAuB,UAACf,GAAD,EAAMC,GAAN,EAAc;AACnC,oBAAMgB,aAAaD,OAAMhB,IAAIkB,WAA7B;AACAlB,oBAAImB,IAAJ,CAASC,QAAQH,UAAR,CAAT,EAA8BE,IAA9B,CAAmClB,GAAnC;AACD,eAHD;AAID;;AAED;AACAd,gBAAIY,GAAJ,CAAS,GAAT,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAWoB,IAAX,EAAoB;AAC/B;AACApB,kBAAIqB,QAAJ,CACErD,cAAe,UAASsD,mBAAmBvB,IAAIR,IAAvB,CAA6B,EAArD,CADF,EAEE,eAAO;AACL;AACA,oBAAI,CAAClB,GAAD,IAAQ,CAACA,IAAIkB,IAAjB,EAAuB;AACrB6B;AACD,iBAFD,MAEO,IAAI/C,GAAJ,EAAS;AACd;AACA;AACA;AACA,sBAAMkD,aAAaC,UAAUnD,IAAIkB,IAAd,CAAnB;AACA,sBACEgC,WAAWE,OAAX,KAAwB,EAAxB,IACAF,WAAWE,OAAX,CAAmBC,UAAnB,CAA+B,OAA/B,CAFF,EAGE;AACAN;AACD,mBALD,MAKO;AACLpB,wBAAI2B,MAAJ,CAAW,GAAX,EAAgBtB,GAAhB;AACD;AACF;AACF,eApBH;AAsBD,aAxBD;;AA0BA;AACAnB,gBAAIE,GAAJ,CAAQ,UAACW,GAAD,EAAMC,GAAN,EAAWoB,IAAX,EAAoB;AAC1B,kBAAMG,aAAaC,UAAUzB,IAAIR,IAAd,CAAnB;AACA,kBAAIgC,WAAWE,OAAX,KAAwB,EAAxB,IAA6BF,WAAWE,OAAX,CAAmBC,UAAnB,CAA+B,OAA/B,CAAjC,EAAyE;AACvE1B,oBAAIqB,QAAJ,CAAarD,cAAe,mBAAf,CAAb,EAAiD,eAAO;AACtD,sBAAIK,GAAJ,EAAS;AACP2B,wBAAI2B,MAAJ,CAAW,GAAX,EAAgBtB,GAAhB;AACD;AACF,iBAJD;AAKD,eAND,MAMO;AACLe;AACD;AACF,aAXD;;AAaA;;;;AAIMQ,kBA1HR,GA0HiBvC,QAAS,MAAT,EAAgBwC,MAAhB,CAAuB3C,GAAvB,CA1HjB;AA2HQ4C,cA3HR,GA2HazC,QAAS,WAAT,EAAqBuC,MAArB,CA3Hb;;;AA6HEE,eAAGC,EAAH,CAAO,YAAP,EAAoB,kBAAU;AAC5BC,qBAAOC,IAAP,CAAa,SAAb;AACD,aAFD;;AAIMC,oBAjIR,GAiImBN,OAAOO,MAAP,CAAcrE,QAAQc,IAAtB,EAA4Bd,QAAQsE,IAApC,EAA0C,eAAO;AAChE,kBAAI/D,GAAJ,EAAS;AACP,oBAAIA,IAAIgE,IAAJ,KAAc,YAAlB,EAA+B;AAC7B;AACA9D,yBAAOC,KAAP,CACG,kCACCV,QAAQc,IACT,qDAHH;AAKA;AACD;;AAEDL,uBAAOC,KAAP,CAAc,qDAAd,EAAoEH,GAApE;AACD;AACF,aAdgB,CAjInB;;AAiJE;;AACMiE,sBAlJR,GAkJqB,CAAE,aAAF,EAAiB,0BAAjB,EAA4CC,GAA5C,CAAgD;AAAA,qBACjEvE,cAAcuB,IAAd,CADiE;AAAA,aAAhD,CAlJrB;;;AAsJEiD,qBAASC,KAAT,CAAeH,UAAf,EAA2BP,EAA3B,CAA+B,QAA/B,2EAAwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAChC7D,iBADgC;;AAAA;AAEtC4D,yBAAGY,EAAH,CAAO,SAAP,EAAiBC,IAAjB,CAAuB,QAAvB;;AAFsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAxC;;AAtJF,8CA2JS,CAAC3D,QAAD,EAAWkD,QAAX,CA3JT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeU,W;;;;;;;AAvCf,IAAM7B,MAAM1B,QAAS,KAAT,CAAZ;AACA,IAAMmD,WAAWnD,QAAS,UAAT,CAAjB;AACA,IAAMF,UAAUE,QAAS,SAAT,CAAhB;AACA,IAAMI,cAAcJ,QAAS,iBAAT,CAApB;AACA,IAAMmC,YAAYnC,QAAS,gBAAT,CAAlB;AACA,IAAM8B,UAAU9B,QAAS,SAAT,CAAhB;AACA,IAAMwD,KAAKxD,QAAS,UAAT,CAAX;AACA,IAAMJ,UAAUI,QAAS,SAAT,CAAhB;AACA,IAAMV,gBAAgBU,QAAS,yBAAT,CAAtB;AACA,IAAMX,YAAYW,QAAS,cAAT,CAAlB;;eACkBA,QAAS,UAAT,C;IAAVM,K,YAAAA,K;;AACR,IAAMmD,sBAAsBzD,QAAS,gCAAT,CAA5B;AACA,IAAMlB,cAAckB,QAAS,gBAAT,CAApB;;gBACyBA,QAAS,eAAT,C;IAAjBpB,Y,aAAAA,Y;;AACR,IAAMM,SAASc,QAAS,yBAAT,CAAf;AACA,IAAMY,eAAeZ,QAAS,8BAAT,CAArB;AACA,IAAM0D,wBAAwB1D,QAAS,uCAAT,CAA9B;AACA,IAAM2D,QAAQ3D,QAAS,OAAT,CAAd;AACA,IAAM4D,UAAU5D,QAAS,SAAT,CAAhB;;AAEA;;AAEA;AACA;AACA;AACA6D,WAAW,YAAM;AACfJ;AACD,CAFD,EAEG,KAFH;;AAIA,IAAMK,cAAcN,GAAGO,eAAH,CAAmB;AACrCC,SAAOC,QAAQC,KADsB;AAErC5C,UAAQ2C,QAAQE;AAFqB,CAAnB,CAApB;;AAKA;AACAL,YAAYpB,EAAZ,CAAgB,QAAhB,EAAyB,YAAM;AAC7BuB,UAAQG,IAAR;AACD,CAFD;;AAkKAC,OAAOC,OAAP;AAAA,uFAAiB,kBAAO7F,OAAP;AAAA,gCAqCN8F,WArCM,EA2FNC,iBA3FM;AAAA;AAAA;AAAA;AAAA;AA2FNA,6BA3FM,YA2FNA,iBA3FM,CA2FYC,OA3FZ,EA2FqBC,IA3FrB,EA2F2BC,OA3F3B,EA2FoC;AACjDC,sBAAQ3E,GAAR;AACA2E,sBAAQ3E,GAAR,CAAa,oBAAmB0D,MAAMkB,IAAN,CAAWJ,OAAX,CAAoB,kBAApD;AACAG,sBAAQ3E,GAAR;;AAEA,kBAAIyE,KAAKI,iBAAT,EAA4B;AAC1BF,wBAAQ3E,GAAR,CACG,KAAI0D,MAAMkB,IAAN,CAAY,QAAZ,CAAqB,eAAcH,KAAKK,mBAAoB,EADnE;AAGAH,wBAAQ3E,GAAR,CACG,KAAI0D,MAAMkB,IAAN,CAAY,kBAAZ,CAA+B,KAAIH,KAAKI,iBAAkB,EADjE;AAGD,eAPD,MAOO;AACLF,wBAAQ3E,GAAR,CAAa,KAAIyE,KAAKK,mBAAoB,EAA1C;AACD;;AAEDH,sBAAQ3E,GAAR;AACA2E,sBAAQ3E,GAAR,CAAa,mDAAb;AACA2E,sBAAQ3E,GAAR,CACG,oCAAD,GAAwC,GAAE0D,MAAMqB,IAAN,CAAY,cAAZ,CAA2B,EADvE;AAGAJ,sBAAQ3E,GAAR;AACD,aAjHc;;AAqCNsE,uBArCM,YAqCNA,WArCM,CAqCMU,QArCN,EAqCgBlC,IArChB,EAqCsBxD,IArCtB,EAqC4B;AACzC,kBAAM2F,YAAY,SAAZA,SAAY;AAAA,uBAChBxD,IAAIyD,MAAJ,CAAW;AACTF,0BADS;AAETG,0BAFS;AAGT7F,sBAHS;AAIT8F,4BAAW;AAJF,iBAAX,CADgB;AAAA,eAAlB;AAOA,kBAAMC,iBAAiB,SAAjBA,cAAiB;AAAA,uBACrB5D,IAAIyD,MAAJ,CAAW;AACTF,0BADS;AAETG,0BAFS;AAGT7F,wBAAMoE,MAAMkB,IAAN,CAAWtF,IAAX,CAHG;AAIT8F,4BAAW;AAJF,iBAAX,CADqB;AAAA,eAAvB;;AAQA,kBAAME,oBAAoBxC,SAAU,SAAV,IAAsBA,SAAU,IAA1D;AACA,kBAAIyC,wBAAJ;AAAA,kBAAqBV,0BAArB;AACA,kBAAIS,iBAAJ,EAAuB;AACrB,oBAAI;AACF;AACAC,oCAAkB5B,QAAQ6B,EAAR,EAAlB;AACA,sBAAID,eAAJ,EAAqB;AACnB;AACA;AACA,wBACE,wDAAwDE,IAAxD,CACEF,eADF,CADF,EAIE;AACA;AACAV,0CAAoBQ,eAAeE,eAAf,CAApB;AACD,qBAPD,MAOO;AACL;AACAA,wCAAkBG,SAAlB;AACD;AACF;AACF,iBAlBD,CAkBE,OAAOC,EAAP,EAAW;AACX;AACD;AACF;AACD;AACA;AACA;AACA,kBAAMb,sBAAsBO,eAAevC,IAAf,CAA5B;AACA,kBAAM8C,qBAAqBX,UAAUnC,IAAV,CAA3B;AACA,qBAAO;AACLyC,+BADK;AAELV,iCAFK;AAGLC,mCAHK;AAILc;AAJK,eAAP;AAMD,aAzFc;;AACTC,kBADS,GACA9F,QAAS,aAAT,CADA;AAETT,gBAFS,GAGb,OAAOd,QAAQc,IAAf,KAAyB,QAAzB,GAAmCwG,SAAStH,QAAQc,IAAjB,EAAuB,EAAvB,CAAnC,GAAgEd,QAAQc,IAH3D;AAKXI,oBALW;AAAA;AAAA,mBAMT,IAAIqG,OAAJ,CAAY,mBAAW;AAC3BF,qBAAOvG,IAAP,EAAa,UAACP,GAAD,EAAMiH,KAAN,EAAgB;AAC3B,oBAAIjH,GAAJ,EAAS;AACPE,yBAAOC,KAAP,CAAaH,GAAb;AACD;;AAED,oBAAIO,SAAS0G,KAAb,EAAoB;AAClB;AACA,sBAAMC,WAAY,wCAChB3G,IACD,kEAFD;;AAIAuE,8BAAYoC,QAAZ,CAAqBA,QAArB,EAA+B,kBAAU;AACvC,wBAAIC,OAAOC,MAAP,KAAkB,CAAlB,IAAuBD,OAAOE,KAAP,CAAa,UAAb,CAA3B,EAAqD;AACnD5H,8BAAQc,IAAR,GAAe0G,KAAf,CADmD,CAC9B;AACtB;;AAED1C,gCAAY9E,OAAZ,EAAqB6H,IAArB,CAA0B,iBAAY;AAAA,0BAAVC,CAAU;AAAA,0BAAPC,CAAO;;AACpC7G,iCAAW4G,CAAX;AACA7G;AACD,qBAHD;AAID,mBATD;AAUD,iBAhBD,MAgBO;AACL6D,8BAAY9E,OAAZ,EAAqB6H,IAArB,CAA0B,iBAAY;AAAA,wBAAVC,CAAU;AAAA,wBAAPC,CAAO;;AACpC7G,+BAAW4G,CAAX;AACA7G;AACD,mBAHD;AAID;AACF,eA3BD;AA4BD,aA7BK,CANS;;AAAA;AAmHX+G,0BAnHW,GAmHM,IAnHN;AAoHf;AACA;;AACA9G,qBAAS+G,MAAT,CAAiB,MAAjB,EAAwB,iBAAS;AAC/B;AACA;AACA;AACA,kBAAMC,WAAWjD,sBAAsBkD,MAAMC,MAAN,CAAa,EAAb,EAAiB,IAAjB,CAAtB,CAAjB;AACA,kBAAMnC,OAAOH,YAAa,MAAb,EAAoB9F,QAAQsE,IAA5B,EAAkCtE,QAAQc,IAA1C,CAAb;AACA,kBAAMuH,eAAe,CAACH,SAASI,MAAT,CAAgBX,MAAjB,IAA2B,CAACO,SAASK,QAAT,CAAkBZ,MAAnE;AACA;AACA;AACA;AACA;AACA,kBAAIU,gBAAgBL,cAApB,EAAoC;AAClCjC,kCAAkB/F,QAAQwI,eAAR,CAAwBhI,IAA1C,EAAgDyF,IAAhD,EAAsDjG,QAAQkG,OAA9D;AACD;;AAED,kBAAIlG,QAAQyI,IAAZ,EAAkB;AAChBlH,wBAAS,KAAT,EAAe0E,KAAKmB,kBAApB;AACD;;AAEDY,+BAAiB,KAAjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,aAlDD;;AAtHe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA","file":"develop.js","sourcesContent":["/* @flow */\n\nconst url = require(`url`)\nconst chokidar = require(`chokidar`)\nconst express = require(`express`)\nconst graphqlHTTP = require(`express-graphql`)\nconst parsePath = require(`parse-filepath`)\nconst request = require(`request`)\nconst rl = require(`readline`)\nconst webpack = require(`webpack`)\nconst webpackConfig = require(`../utils/webpack.config`)\nconst bootstrap = require(`../bootstrap`)\nconst { store } = require(`../redux`)\nconst copyStaticDirectory = require(`../utils/copy-static-directory`)\nconst developHtml = require(`./develop-html`)\nconst { withBasePath } = require(`../utils/path`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst launchEditor = require(`react-dev-utils/launchEditor`)\nconst formatWebpackMessages = require(`react-dev-utils/formatWebpackMessages`)\nconst chalk = require(`chalk`)\nconst address = require(`address`)\n\n// const isInteractive = process.stdout.isTTY\n\n// Watch the static directory and copy files to public as they're added or\n// changed. Wait 10 seconds so copying doesn't interfer with the regular\n// bootstrap.\nsetTimeout(() => {\n  copyStaticDirectory()\n}, 10000)\n\nconst rlInterface = rl.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n})\n\n// Quit immediately on hearing ctrl-c\nrlInterface.on(`SIGINT`, () => {\n  process.exit()\n})\n\nasync function startServer(program) {\n  const directory = program.directory\n  const directoryPath = withBasePath(directory)\n  const createIndexHtml = () =>\n    developHtml(program).catch(err => {\n      if (err.name !== `WebpackError`) {\n        report.panic(err)\n        return\n      }\n      report.panic(\n        report.stripIndent`\n          There was an error compiling the html.js component for the development server.\n\n          See our docs page on debugging HTML builds for help https://goo.gl/yL9lND\n        `,\n        err\n      )\n    })\n\n  // Start bootstrap process.\n  await bootstrap(program)\n\n  await createIndexHtml()\n\n  const compilerConfig = await webpackConfig(\n    program,\n    directory,\n    `develop`,\n    program.port\n  )\n\n  const devConfig = compilerConfig.resolve()\n  const compiler = webpack(devConfig)\n\n  /**\n   * Set up the express app.\n   **/\n  const app = express()\n  app.use(\n    require(`webpack-hot-middleware`)(compiler, {\n      log: () => {},\n      path: `/__webpack_hmr`,\n      heartbeat: 10 * 1000,\n    })\n  )\n  app.use(\n    `/___graphql`,\n    graphqlHTTP({\n      schema: store.getState().schema,\n      graphiql: true,\n    })\n  )\n  app.get(`/__open-stack-frame-in-editor`, (req, res) => {\n    launchEditor(req.query.fileName, req.query.lineNumber)\n    res.end()\n  })\n\n  app.use(express.static(__dirname + `/public`))\n\n  app.use(\n    require(`webpack-dev-middleware`)(compiler, {\n      noInfo: true,\n      quiet: true,\n      publicPath: devConfig.output.publicPath,\n    })\n  )\n\n  // Set up API proxy.\n  const { proxy } = store.getState().config\n  if (proxy) {\n    const { prefix, url } = proxy\n    app.use(`${prefix}/*`, (req, res) => {\n      const proxiedUrl = url + req.originalUrl\n      req.pipe(request(proxiedUrl)).pipe(res)\n    })\n  }\n\n  // Check if the file exists in the public folder.\n  app.get(`*`, (req, res, next) => {\n    // Load file but ignore errors.\n    res.sendFile(\n      directoryPath(`/public${decodeURIComponent(req.path)}`),\n      err => {\n        // No err so a file was sent successfully.\n        if (!err || !err.path) {\n          next()\n        } else if (err) {\n          // There was an error. Let's check if the error was because it\n          // couldn't find an HTML file. We ignore these as we want to serve\n          // all HTML from our single empty SSR html file.\n          const parsedPath = parsePath(err.path)\n          if (\n            parsedPath.extname === `` ||\n            parsedPath.extname.startsWith(`.html`)\n          ) {\n            next()\n          } else {\n            res.status(404).end()\n          }\n        }\n      }\n    )\n  })\n\n  // Render an HTML page and serve it.\n  app.use((req, res, next) => {\n    const parsedPath = parsePath(req.path)\n    if (parsedPath.extname === `` || parsedPath.extname.startsWith(`.html`)) {\n      res.sendFile(directoryPath(`public/index.html`), err => {\n        if (err) {\n          res.status(500).end()\n        }\n      })\n    } else {\n      next()\n    }\n  })\n\n  /**\n   * Set up the HTTP server and socket.io.\n   **/\n\n  const server = require(`http`).Server(app)\n  const io = require(`socket.io`)(server)\n\n  io.on(`connection`, socket => {\n    socket.join(`clients`)\n  })\n\n  const listener = server.listen(program.port, program.host, err => {\n    if (err) {\n      if (err.code === `EADDRINUSE`) {\n        // eslint-disable-next-line max-len\n        report.panic(\n          `Unable to start Gatsby on port ${\n            program.port\n          } as there's already a process listing on that port.`\n        )\n        return\n      }\n\n      report.panic(`There was a problem starting the development server`, err)\n    }\n  })\n\n  // Register watcher that rebuilds index.html every time html.js changes.\n  const watchGlobs = [`src/html.js`, `plugins/**/gatsby-ssr.js`].map(path =>\n    directoryPath(path)\n  )\n\n  chokidar.watch(watchGlobs).on(`change`, async () => {\n    await createIndexHtml()\n    io.to(`clients`).emit(`reload`)\n  })\n\n  return [compiler, listener]\n}\n\nmodule.exports = async (program: any) => {\n  const detect = require(`detect-port`)\n  const port =\n    typeof program.port === `string` ? parseInt(program.port, 10) : program.port\n\n  let compiler\n  await new Promise(resolve => {\n    detect(port, (err, _port) => {\n      if (err) {\n        report.panic(err)\n      }\n\n      if (port !== _port) {\n        // eslint-disable-next-line max-len\n        const question = `Something is already running at port ${\n          port\n        } \\nWould you like to run the app at another port instead? [Y/n] `\n\n        rlInterface.question(question, answer => {\n          if (answer.length === 0 || answer.match(/^yes|y$/i)) {\n            program.port = _port // eslint-disable-line no-param-reassign\n          }\n\n          startServer(program).then(([c, l]) => {\n            compiler = c\n            resolve()\n          })\n        })\n      } else {\n        startServer(program).then(([c, l]) => {\n          compiler = c\n          resolve()\n        })\n      }\n    })\n  })\n\n  function prepareUrls(protocol, host, port) {\n    const formatUrl = hostname =>\n      url.format({\n        protocol,\n        hostname,\n        port,\n        pathname: `/`,\n      })\n    const prettyPrintUrl = hostname =>\n      url.format({\n        protocol,\n        hostname,\n        port: chalk.bold(port),\n        pathname: `/`,\n      })\n\n    const isUnspecifiedHost = host === `0.0.0.0` || host === `::`\n    let lanUrlForConfig, lanUrlForTerminal\n    if (isUnspecifiedHost) {\n      try {\n        // This can only return an IPv4 address\n        lanUrlForConfig = address.ip()\n        if (lanUrlForConfig) {\n          // Check if the address is a private ip\n          // https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces\n          if (\n            /^10[.]|^172[.](1[6-9]|2[0-9]|3[0-1])[.]|^192[.]168[.]/.test(\n              lanUrlForConfig\n            )\n          ) {\n            // Address is private, format it for later use\n            lanUrlForTerminal = prettyPrintUrl(lanUrlForConfig)\n          } else {\n            // Address is not private, so we will discard it\n            lanUrlForConfig = undefined\n          }\n        }\n      } catch (_e) {\n        // ignored\n      }\n    }\n    // TODO collect errors (GraphQL + Webpack) in Redux so we\n    // can clear terminal and print them out on every compile.\n    // Borrow pretty printing code from webpack plugin.\n    const localUrlForTerminal = prettyPrintUrl(host)\n    const localUrlForBrowser = formatUrl(host)\n    return {\n      lanUrlForConfig,\n      lanUrlForTerminal,\n      localUrlForTerminal,\n      localUrlForBrowser,\n    }\n  }\n\n  function printInstructions(appName, urls, useYarn) {\n    console.log()\n    console.log(`You can now view ${chalk.bold(appName)} in the browser.`)\n    console.log()\n\n    if (urls.lanUrlForTerminal) {\n      console.log(\n        `  ${chalk.bold(`Local:`)}            ${urls.localUrlForTerminal}`\n      )\n      console.log(\n        `  ${chalk.bold(`On Your Network:`)}  ${urls.lanUrlForTerminal}`\n      )\n    } else {\n      console.log(`  ${urls.localUrlForTerminal}`)\n    }\n\n    console.log()\n    console.log(`Note that the development build is not optimized.`)\n    console.log(\n      `To create a production build, use ` + `${chalk.cyan(`gatsby build`)}`\n    )\n    console.log()\n  }\n\n  let isFirstCompile = true\n  // \"done\" event fires when Webpack has finished recompiling the bundle.\n  // Whether or not you have warnings or errors, you will get this event.\n  compiler.plugin(`done`, stats => {\n    // We have switched off the default Webpack output in WebpackDevServer\n    // options so we are going to \"massage\" the warnings and errors and present\n    // them in a readable focused way.\n    const messages = formatWebpackMessages(stats.toJson({}, true))\n    const urls = prepareUrls(`http`, program.host, program.port)\n    const isSuccessful = !messages.errors.length && !messages.warnings.length\n    // if (isSuccessful) {\n    // console.log(chalk.green(`Compiled successfully!`))\n    // }\n    // if (isSuccessful && (isInteractive || isFirstCompile)) {\n    if (isSuccessful && isFirstCompile) {\n      printInstructions(program.sitePackageJson.name, urls, program.useYarn)\n    }\n\n    if (program.open) {\n      require(`opn`)(urls.localUrlForBrowser)\n    }\n\n    isFirstCompile = false\n\n    // If errors exist, only show errors.\n    // if (messages.errors.length) {\n    // // Only keep the first error. Others are often indicative\n    // // of the same problem, but confuse the reader with noise.\n    // if (messages.errors.length > 1) {\n    // messages.errors.length = 1\n    // }\n    // console.log(chalk.red(\"Failed to compile.\\n\"))\n    // console.log(messages.errors.join(\"\\n\\n\"))\n    // return\n    // }\n\n    // Show warnings if no errors were found.\n    // if (messages.warnings.length) {\n    // console.log(chalk.yellow(\"Compiled with warnings.\\n\"))\n    // console.log(messages.warnings.join(\"\\n\\n\"))\n\n    // // Teach some ESLint tricks.\n    // console.log(\n    // \"\\nSearch for the \" +\n    // chalk.underline(chalk.yellow(\"keywords\")) +\n    // \" to learn more about each warning.\"\n    // )\n    // console.log(\n    // \"To ignore, add \" +\n    // chalk.cyan(\"// eslint-disable-next-line\") +\n    // \" to the line before.\\n\"\n    // )\n    // }\n  })\n}\n"]}
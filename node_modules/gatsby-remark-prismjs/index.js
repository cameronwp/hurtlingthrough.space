"use strict";

var visit = require(`unist-util-visit`);

var parseLineNumberRange = require(`./parse-line-number-range`);
var highlightCode = require(`./highlight-code`);

module.exports = function (_ref) {
  var markdownAST = _ref.markdownAST;

  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$classPrefix = _ref2.classPrefix,
      classPrefix = _ref2$classPrefix === undefined ? `language-` : _ref2$classPrefix;

  visit(markdownAST, `code`, function (node) {
    var language = node.lang;

    var _parseLineNumberRange = parseLineNumberRange(language),
        splitLanguage = _parseLineNumberRange.splitLanguage,
        highlightLines = _parseLineNumberRange.highlightLines;

    language = splitLanguage;

    // PrismJS's theme styles are targeting pre[class*="language-"]
    // to apply its styles. We do the same here so that users
    // can apply a PrismJS theme and get the expected, ready-to-use
    // outcome without any additional CSS.
    //
    // @see https://github.com/PrismJS/prism/blob/1d5047df37aacc900f8270b1c6215028f6988eb1/themes/prism.css#L49-L54
    var languageName = `none`;
    if (language) {
      language = language.toLowerCase();
      languageName = language;
    }

    // Allow users to specify a custom class prefix to avoid breaking
    // line highlights if Prism is required by any other code.
    // This supports custom user styling without causing Prism to
    // re-process our already-highlighted markup.
    // @see https://github.com/gatsbyjs/gatsby/issues/1486
    var className = `${classPrefix}${languageName}`;

    // Replace the node with the markup we need to make
    // 100% width highlighted code lines work
    node.type = `html`;
    node.value = `<div class="gatsby-highlight">
      <pre class="${className}"><code>${highlightCode(language, node.value, highlightLines)}</code></pre>
      </div>`;
  });
};